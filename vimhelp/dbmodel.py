# Definitions of objects stored in Datastore

from google.cloud import ndb


ndb_client = ndb.Client()


# There is one of these objects in the datastore, to persist some bits of info
# that we need across update runs; key name is "global".
class GlobalInfo(ndb.Model):
    docdir_etag = ndb.BlobProperty()
    # HTTP ETag of the vim repository request for the 'runtime/doc'
    # subdirectory

    master_etag = ndb.BlobProperty()
    # HTTP ETag of the commit that the master branch points to

    vim_version = ndb.BlobProperty()
    # Current Vim version


# Tags, for use with the "go to tag" feature; key name is "tags".
class TagsInfo(ndb.Model):
    tags = ndb.JsonProperty(json_type=list)
    # Map from vimhelp tag to (site-relative) link. Looks like this:
    # [ ["t": "motion.txt#t"], ["perl": "if_perl.txt#perl"], ... ]


# Info related to an unprocessed documentation file from the repository; key
# name is basename, e.g. "help.txt"
class RawFileInfo(ndb.Model):
    git_sha = ndb.BlobProperty()
    # 'sha' property returned by GitHub API (not populated for vim_faq.txt)

    etag = ndb.BlobProperty()
    # HTTP ETag of the file on github


# The actual contents of an unprocessed documentation file from the repository;
# key name is basename, e.g. "help.txt"
class RawFileContent(ndb.Model):
    data = ndb.BlobProperty(required=True)
    # The data

    encoding = ndb.BlobProperty(required=True)
    # The encoding, e.g. 'UTF-8'


# Info related to a processed (HTMLified) documentation file; key name is
# basename, e.g. "help.txt"
class ProcessedFileHead(ndb.Model):
    etag = ndb.BlobProperty(required=True)
    # HTTP ETag on this server, generated by us as a hash of the contents

    encoding = ndb.BlobProperty(required=True)
    # Encoding, always matches the corresponding 'RawFileContent' object

    modified = ndb.DateTimeProperty(indexed=False, auto_now=True)
    # Time when this file was generated

    numparts = ndb.IntegerProperty(indexed=False)
    # Number of parts; there will be 'numparts - 1' objects of kind
    # 'ProcessedFilePart' in the database. Processed files are split up into
    # parts as required by datastore blob limitations (currently these can only
    # be up to 1 MiB in size)

    data0 = ndb.BlobProperty(required=True)
    # Contents of the first (and possibly only) part


# Part of a processed file; keyname is basename + ":" + partnum (1-based), e.g.
# "help.txt:1".
# This chunking is necessary because the maximum entity size in the Datastore
# is 1 MB: see https://cloud.google.com/datastore/docs/concepts/limits
# NOTE: vimhelp.py currently relies on the keynames, when sorted
# lexicographically, yielding the correct order; this implies that we must
# never have a partnum with more than one digit.
class ProcessedFilePart(ndb.Model):
    data = ndb.BlobProperty(required=True)
    # Contents

    etag = ndb.BlobProperty(required=True)
    # Same value as corresponding 'ProcessedFileHead.etag'.  Used when
    # retrieving the 'ProcessedFileHead' and all its 'ProcessedFilePart's to
    # ensure that they were retrieved consistently.
